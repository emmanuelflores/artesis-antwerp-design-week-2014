<jittershader name="edgefuzz">

	<param name="LightPosition" type="vec3" default="0.5 2. 1.25"/>
	<param name="Specularity" type="float" default="0.1448"/>
	<param name="Fuzziness" type="float" default="0.166"/>
	<param name="EdgeColor" type="vec4" default="0. 0.2 0.9 1.0"/>
	<param name="SurfaceColor" type="vec4" default="0.4 0.8 0.1 0.5"/>
	<param name="EdgeFade" type="float" default="3.686"/>
	<param name="LightColor" type="vec4" default="1. 1. 1. 1."/>
	<param name="AmbientColor" type="vec4" default="0. 0. 0. 1."/>

	
	<language name="glsl" version="1.0">
		<bind param="LightPosition" program="vp"/>
		<bind param="Specularity" program="fp"/>
		<bind param="Fuzziness" program="fp"/>
		<bind param="EdgeColor" program="fp"/>
		<bind param="SurfaceColor" program="fp"/>
		<bind param="EdgeFade" program="fp"/>
		<bind param="LightColor" program="fp"/>
		<bind param="AmbientColor" program="fp"/>


		<program name="vp" type="vertex">
<![CDATA[
/////////////////////////////////////
////	   	   EDGE FUZZ VS		////
/////////////////////////////////////

/*
	Adapted from:
	NVIDIA Shader Library effect 'EdgeFuzz.fx'
	http://developer.download.nvidia.com/shaderlibrary/webpages/shader_library.html
*/

uniform vec3 LightPosition;

// Varyings (to Fragment Shader)
varying vec3 LightVec, EyeView, EyeNormal;

// Edge Fuzz Vertex Shader function
void edgefuzzVS(in vec4 V, in vec3 N)
{
	V = gl_ModelViewMatrix * V;
	vec3 v = vec3(V.xyz / V.w);
	LightVec = vec3(LightPosition.xyz - v.xyz);
	EyeView = normalize(vec3(0.0,0.0,2.0).xyz - v.xyz);
	EyeNormal = gl_NormalMatrix * N;
}

// Main Loop
void main(void)
{
	edgefuzzVS(gl_Vertex,gl_Normal);
	
	//Transform vertex by modelview and projection matrices
	gl_Position = gl_ModelViewProjectionMatrix * gl_Vertex;
	
	//Forward texture coordinates after applying texture matrix
	gl_TexCoord[0] = gl_TextureMatrix[0] * gl_MultiTexCoord0;
}
]]>
		</program>
		
		<program name="fp" type="fragment">
<![CDATA[
/////////////////////////////////////
////	   	   EDGE FUZZ FS		////
/////////////////////////////////////

/*
	Adapted from:
	NVIDIA Shader Library effect 'EdgeFuzz.fx'
*/

// Tweakable parameters
uniform float Specularity;
uniform float Fuzziness;
uniform vec4 EdgeColor;
uniform vec4 SurfaceColor;
uniform float EdgeFade;
uniform vec4 LightColor;
uniform vec4 AmbientColor;
vec4 SpecularColor = vec4(1.0,1.0,1.0,1.0);

// Varyings (from Vertex Shader)
varying vec3 LightVec, EyeView, EyeNormal;

// GLSL version of HLSL builtin lit function
vec3 lit (in float ndotl, in float ndoth, in float m){	float ambient = 1.0;	float diffuse = max(ndotl, 0.0);	float specular = step(0.0,ndotl) * max(ndoth * m, 1.0);	return vec3(ambient, diffuse, specular);}

// Edge Fuzz Fragment Shader function
vec4 edgefuzzFS()
{
	vec3 Ln = normalize(LightVec);
	vec3 Vn = normalize(EyeView);
	vec3 Nn = normalize(EyeNormal);
	vec3 Hn = normalize(Vn + Ln);
	float ldn = dot(Ln,Nn);
	vec4 lv = vec4(lit(ldn,dot(Hn,Nn),Specularity),1.0);
	float subd = abs(dot(Nn,Vn));
	subd = pow(subd,Fuzziness);
	vec3 SurfColor = mix(EdgeColor.rgb,SurfaceColor.rgb,subd);
	SurfColor = mix(SurfaceColor.rgb,SurfColor,EdgeFade);
	ldn = max(ldn,0.0);
	ldn = pow(ldn,Fuzziness);
	vec3 IncidentColor = mix(EdgeColor.rgb,LightColor.rgb,ldn);
	IncidentColor = mix(LightColor.rgb,IncidentColor,ldn);
	vec3 diffContrib = SurfColor * (lv.y*IncidentColor + AmbientColor.rgb);
	vec3 specContrib = SpecularColor.rgb * lv.y * lv.z * IncidentColor;
	
	return vec4(diffContrib+specContrib,1.0);
}


// Main Loop
void main (void)
{
    gl_FragColor = edgefuzzFS();
}
]]>
		</program>
	</language>
</jittershader>